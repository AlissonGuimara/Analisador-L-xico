/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/*Seccion de codigo de usuario*/
package analizadorlex;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

//clase de los token devueltos
class Yytoken {
    Yytoken (int numToken,String token, String tipo, int linea, int columna){
        //Contador para el número de tokens reconocidos
        this.numToken = numToken;
        //String del token reconocido
        this.token = new String(token);
        //Tipo de componente léxico encontrado
        this.tipo = tipo;
        //Número de linea
        this.linea = linea;
        //Columna donde empieza el primer carácter del token
        this.columna = columna;
    }
    //Métodos de los atributos de la clase
    public int numToken;
    public String token;
    public String tipo;
    public int linea;
    public int columna;
    //Metodo que devuelve los datos necesarios que escribiremos en un archive de salida
    public String toString() {
        return "Token#"+numToken+": "+token+"|"+"  Componente Lexico:  "+"|"+tipo+" ["+"Linea: "+(linea)+ "]";
    }
}

/* Seccion de opciones y declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>alexico.flex</tt>
 */
public class AnalizadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\5\2\0\1\6\22\0\1\4\1\44\1\54\1\3"+
    "\2\0\1\42\1\0\1\45\1\46\1\40\1\36\1\52\1\37\1\0"+
    "\1\41\12\2\1\53\1\51\1\50\1\35\1\47\2\0\32\1\1\57"+
    "\1\0\1\60\3\0\1\12\1\14\1\7\1\22\1\11\1\33\1\31"+
    "\1\15\1\17\2\1\1\26\1\25\1\30\1\20\1\34\1\1\1\10"+
    "\1\23\1\13\1\21\1\16\1\27\1\32\1\24\1\1\1\55\1\43"+
    "\1\56\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\2\3\13\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\21\1\1\30\12\1\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\0\1\41\1\42"+
    "\4\1\1\43\5\1\1\44\15\1\1\45\11\1\1\46"+
    "\1\1\1\47\1\50\5\1\1\51\1\52\1\53\1\1"+
    "\1\54\5\1\1\55\15\1\1\56\2\1\1\57\1\1"+
    "\1\60\4\1\1\61\4\1\1\62\2\1\1\63\4\1"+
    "\1\64\5\1\1\65\3\1\1\66\3\1\1\67\1\70"+
    "\4\1\1\71\1\72\2\1\1\73\1\74\1\75\2\1"+
    "\1\76\1\1\1\77\2\1\1\100\1\1\1\101\1\1"+
    "\1\102\1\103\2\1\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\304\0\304"+
    "\0\u0436\0\u0467\0\304\0\u0498\0\u04c9\0\304\0\304\0\304"+
    "\0\304\0\304\0\304\0\304\0\304\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\61\0\u083b"+
    "\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3"+
    "\0\u09f4\0\304\0\304\0\304\0\304\0\304\0\304\0\304"+
    "\0\304\0\u0a25\0\304\0\304\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9"+
    "\0\61\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\61\0\u0c0f"+
    "\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\61\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\304\0\u1045"+
    "\0\61\0\61\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\61"+
    "\0\61\0\61\0\u116b\0\61\0\u119c\0\u11cd\0\u11fe\0\u122f"+
    "\0\u1260\0\61\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386"+
    "\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\61"+
    "\0\u150e\0\u153f\0\61\0\u1570\0\61\0\u15a1\0\u15d2\0\u1603"+
    "\0\u1634\0\61\0\u1665\0\u1696\0\u16c7\0\u16f8\0\61\0\u1729"+
    "\0\u175a\0\61\0\u178b\0\u17bc\0\u17ed\0\u181e\0\61\0\u184f"+
    "\0\u1880\0\u18b1\0\u18e2\0\u1913\0\61\0\u1944\0\u1975\0\u19a6"+
    "\0\61\0\u19d7\0\u1a08\0\u1a39\0\61\0\61\0\u1a6a\0\u1a9b"+
    "\0\u1acc\0\u1afd\0\61\0\61\0\u1b2e\0\u1b5f\0\61\0\61"+
    "\0\61\0\u1b90\0\u1bc1\0\61\0\u1bf2\0\61\0\u1c23\0\u1c54"+
    "\0\61\0\u1c85\0\61\0\u1cb6\0\61\0\61\0\u1ce7\0\u1d18"+
    "\0\61\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\2\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\2\1\14\1\15\2\2"+
    "\1\16\1\17\5\2\1\20\2\2\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\0\2\2\4\0\26\2\26\0\1\3"+
    "\57\0\2\4\1\5\1\4\2\0\26\4\112\0\1\5"+
    "\54\0\2\2\4\0\1\2\1\46\1\2\1\47\4\2"+
    "\1\50\15\2\25\0\2\2\4\0\2\2\1\51\6\2"+
    "\1\52\14\2\25\0\2\2\4\0\1\53\16\2\1\54"+
    "\1\2\1\55\1\2\1\56\2\2\25\0\2\2\4\0"+
    "\2\2\1\57\1\60\4\2\1\61\15\2\25\0\2\2"+
    "\4\0\2\2\1\62\5\2\1\63\1\2\1\64\13\2"+
    "\25\0\2\2\4\0\10\2\1\65\15\2\25\0\2\2"+
    "\4\0\21\2\1\66\2\2\1\67\1\2\25\0\2\2"+
    "\4\0\2\2\1\70\23\2\25\0\2\2\4\0\2\2"+
    "\1\71\1\2\1\72\3\2\1\73\5\2\1\74\1\75"+
    "\1\76\5\2\25\0\2\2\4\0\1\2\1\77\24\2"+
    "\25\0\2\2\4\0\1\2\1\100\7\2\1\101\14\2"+
    "\61\0\1\102\60\0\1\103\1\104\57\0\1\105\1\0"+
    "\1\106\56\0\1\107\60\0\1\110\60\0\1\111\61\0"+
    "\1\112\57\0\1\113\60\0\1\114\24\0\2\2\4\0"+
    "\2\2\1\115\23\2\25\0\2\2\4\0\14\2\1\116"+
    "\2\2\1\117\6\2\25\0\2\2\4\0\1\120\25\2"+
    "\25\0\2\2\4\0\4\2\1\121\7\2\1\122\7\2"+
    "\1\123\1\2\25\0\2\2\4\0\12\2\1\124\13\2"+
    "\25\0\2\2\4\0\11\2\1\125\14\2\25\0\2\2"+
    "\4\0\14\2\1\126\11\2\25\0\2\2\4\0\13\2"+
    "\1\127\12\2\25\0\2\2\4\0\10\2\1\130\15\2"+
    "\25\0\2\2\4\0\23\2\1\131\2\2\25\0\2\2"+
    "\4\0\5\2\1\132\20\2\25\0\2\2\4\0\16\2"+
    "\1\133\2\2\1\134\4\2\25\0\2\2\4\0\6\2"+
    "\1\135\17\2\25\0\2\2\4\0\22\2\1\136\3\2"+
    "\25\0\2\2\4\0\10\2\1\137\15\2\25\0\2\2"+
    "\4\0\1\2\1\140\24\2\25\0\2\2\4\0\10\2"+
    "\1\141\15\2\25\0\2\2\4\0\1\142\13\2\1\143"+
    "\7\2\1\144\1\2\25\0\2\2\4\0\4\2\1\145"+
    "\15\2\1\146\3\2\25\0\2\2\4\0\3\2\1\147"+
    "\22\2\25\0\2\2\4\0\16\2\1\150\7\2\25\0"+
    "\2\2\4\0\3\2\1\151\22\2\25\0\2\2\4\0"+
    "\2\2\1\152\23\2\25\0\2\2\4\0\10\2\1\153"+
    "\15\2\25\0\2\2\4\0\11\2\1\154\14\2\25\0"+
    "\2\2\4\0\11\2\1\155\14\2\25\0\2\2\4\0"+
    "\25\2\1\156\72\0\1\157\13\0\2\2\4\0\3\2"+
    "\1\160\22\2\25\0\2\2\4\0\2\2\1\161\23\2"+
    "\25\0\2\2\4\0\17\2\1\162\6\2\25\0\2\2"+
    "\4\0\17\2\1\163\6\2\25\0\2\2\4\0\11\2"+
    "\1\164\14\2\25\0\2\2\4\0\2\2\1\165\23\2"+
    "\25\0\2\2\4\0\4\2\1\166\21\2\25\0\2\2"+
    "\4\0\21\2\1\167\4\2\25\0\2\2\4\0\2\2"+
    "\1\170\23\2\25\0\2\2\4\0\4\2\1\171\21\2"+
    "\25\0\2\2\4\0\4\2\1\172\21\2\25\0\2\2"+
    "\4\0\17\2\1\173\6\2\25\0\2\2\4\0\2\2"+
    "\1\174\23\2\25\0\2\2\4\0\15\2\1\175\10\2"+
    "\25\0\2\2\4\0\3\2\1\176\22\2\25\0\2\2"+
    "\4\0\10\2\1\177\15\2\25\0\2\2\4\0\17\2"+
    "\1\200\6\2\25\0\2\2\4\0\12\2\1\201\13\2"+
    "\25\0\2\2\4\0\4\2\1\202\21\2\25\0\2\2"+
    "\4\0\10\2\1\203\15\2\25\0\2\2\4\0\4\2"+
    "\1\204\21\2\25\0\2\2\4\0\10\2\1\205\15\2"+
    "\25\0\2\2\4\0\16\2\1\206\7\2\25\0\2\2"+
    "\4\0\1\2\1\207\24\2\25\0\2\2\4\0\12\2"+
    "\1\210\13\2\25\0\2\2\4\0\17\2\1\211\6\2"+
    "\25\0\2\2\4\0\2\2\1\212\23\2\25\0\2\2"+
    "\4\0\4\2\1\213\21\2\25\0\2\2\4\0\20\2"+
    "\1\214\5\2\25\0\2\2\4\0\22\2\1\215\3\2"+
    "\25\0\2\2\4\0\12\2\1\216\13\2\25\0\2\2"+
    "\4\0\4\2\1\217\21\2\25\0\2\2\4\0\2\2"+
    "\1\220\23\2\25\0\2\2\4\0\12\2\1\221\13\2"+
    "\25\0\2\2\4\0\1\2\1\222\24\2\25\0\2\2"+
    "\4\0\2\2\1\223\23\2\25\0\2\2\4\0\11\2"+
    "\1\224\14\2\25\0\2\2\4\0\2\2\1\225\23\2"+
    "\25\0\2\2\4\0\10\2\1\226\15\2\25\0\2\2"+
    "\4\0\7\2\1\227\16\2\25\0\2\2\4\0\21\2"+
    "\1\230\4\2\25\0\2\2\4\0\13\2\1\231\12\2"+
    "\25\0\2\2\4\0\14\2\1\232\11\2\25\0\2\2"+
    "\4\0\16\2\1\233\7\2\25\0\2\2\4\0\1\2"+
    "\1\234\24\2\25\0\2\2\4\0\21\2\1\235\4\2"+
    "\25\0\2\2\4\0\2\2\1\236\23\2\25\0\2\2"+
    "\4\0\4\2\1\237\21\2\25\0\2\2\4\0\17\2"+
    "\1\240\6\2\25\0\2\2\4\0\17\2\1\241\6\2"+
    "\25\0\2\2\4\0\25\2\1\242\25\0\2\2\4\0"+
    "\1\243\25\2\25\0\2\2\4\0\4\2\1\244\21\2"+
    "\25\0\2\2\4\0\1\2\1\245\24\2\25\0\2\2"+
    "\4\0\17\2\1\246\6\2\25\0\2\2\4\0\2\2"+
    "\1\247\23\2\25\0\2\2\4\0\1\2\1\250\24\2"+
    "\25\0\2\2\4\0\2\2\1\251\23\2\25\0\2\2"+
    "\4\0\16\2\1\252\7\2\25\0\2\2\4\0\21\2"+
    "\1\253\4\2\25\0\2\2\4\0\10\2\1\254\15\2"+
    "\25\0\2\2\4\0\4\2\1\255\21\2\25\0\2\2"+
    "\4\0\10\2\1\256\15\2\25\0\2\2\4\0\3\2"+
    "\1\257\22\2\25\0\2\2\4\0\11\2\1\260\14\2"+
    "\25\0\2\2\4\0\2\2\1\261\23\2\25\0\2\2"+
    "\4\0\21\2\1\262\4\2\25\0\2\2\4\0\3\2"+
    "\1\263\22\2\25\0\2\2\4\0\10\2\1\264\15\2"+
    "\25\0\2\2\4\0\6\2\1\265\17\2\25\0\2\2"+
    "\4\0\6\2\1\266\17\2\25\0\2\2\4\0\3\2"+
    "\1\267\22\2\25\0\2\2\4\0\3\2\1\270\22\2"+
    "\25\0\2\2\4\0\1\271\25\2\25\0\2\2\4\0"+
    "\21\2\1\272\4\2\25\0\2\2\4\0\15\2\1\273"+
    "\10\2\25\0\2\2\4\0\4\2\1\274\21\2\25\0"+
    "\2\2\4\0\11\2\1\275\14\2\25\0\2\2\4\0"+
    "\21\2\1\276\4\2\25\0\2\2\4\0\17\2\1\277"+
    "\6\2\25\0\2\2\4\0\15\2\1\300\10\2\25\0"+
    "\2\2\4\0\4\2\1\301\21\2\25\0\2\2\4\0"+
    "\4\2\1\302\21\2\25\0\2\2\4\0\21\2\1\303"+
    "\4\2\25\0\2\2\4\0\16\2\1\304\7\2\25\0"+
    "\2\2\4\0\4\2\1\305\21\2\25\0\2\2\4\0"+
    "\2\2\1\306\23\2\25\0\2\2\4\0\1\307\25\2"+
    "\25\0\2\2\4\0\12\2\1\310\13\2\25\0\2\2"+
    "\4\0\22\2\1\311\3\2\25\0\2\2\4\0\10\2"+
    "\1\312\15\2\25\0\2\2\4\0\4\2\1\313\21\2"+
    "\25\0\2\2\4\0\10\2\1\314\15\2\25\0\2\2"+
    "\4\0\2\2\1\315\23\2\25\0\2\2\4\0\1\2"+
    "\1\316\24\2\25\0\2\2\4\0\11\2\1\317\14\2"+
    "\25\0\2\2\4\0\11\2\1\320\14\2\25\0\2\2"+
    "\4\0\21\2\1\321\4\2\25\0\2\2\4\0\21\2"+
    "\1\322\4\2\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7497];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\0\1\11\21\1\2\11\2\1\1\11"+
    "\2\1\10\11\34\1\10\11\1\0\2\11\42\1\1\11"+
    "\143\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	
    private int contador;
    private ArrayList<Yytoken> tokens;

	private void writeOutputFile() throws IOException{
			String filename = "file.out";
			BufferedWriter out = new BufferedWriter(
				new FileWriter(filename));
            System.out.println("\n*** Tokens guardados en archivo ***\n");
			for(Yytoken t: this.tokens){
				System.out.println(t);
				out.write(t + "\n");
			}
			out.close();
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
      contador = 0;
	tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try{
		this.writeOutputFile();
        //System.exit(0);
	}catch(IOException ioe){
		ioe.printStackTrace();
	}

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"id",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 70: break;
        case 2: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"num",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 71: break;
        case 3: 
          { //ignorar
          }
        case 72: break;
        case 4: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"asignacion",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 73: break;
        case 5: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"suma",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 74: break;
        case 6: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"resta",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 75: break;
        case 7: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"multiplicacion",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 76: break;
        case 8: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"division",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 77: break;
        case 9: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"and",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 78: break;
        case 10: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"or",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 79: break;
        case 11: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"not",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 80: break;
        case 12: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"parentesis_apertura",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 81: break;
        case 13: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"parentesis_cierre",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 82: break;
        case 14: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Mayor_que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 83: break;
        case 15: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Menor_que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 84: break;
        case 16: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"terminador_sentencia",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 85: break;
        case 17: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"separador",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 86: break;
        case 18: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"puntos_de_rutina",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 87: break;
        case 19: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"comillas",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 88: break;
        case 20: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"llave_apertura",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 89: break;
        case 21: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"llave_cierre",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 90: break;
        case 22: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"corchete_apertura",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 91: break;
        case 23: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"corchete_cierre",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 92: break;
        case 24: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"IF",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 93: break;
        case 25: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"igual que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 94: break;
        case 26: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Suma_sobre_asignación_previa",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 95: break;
        case 27: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"incremento",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 96: break;
        case 28: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Resta_sobre_asignacion_previa",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 97: break;
        case 29: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"decremento",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 98: break;
        case 30: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Multiplicacion_sobre_asignacion_previa",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 99: break;
        case 31: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Division_sobre_asignacion_previa",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 100: break;
        case 32: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"distinto",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 101: break;
        case 33: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Mayor_igual_que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 102: break;
        case 34: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Menor_igual_que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 103: break;
        case 35: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"RET",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 104: break;
        case 36: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"END",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 105: break;
        case 37: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SET",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 106: break;
        case 38: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"xor",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 107: break;
        case 39: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"CASE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 108: break;
        case 40: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"CALL",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 109: break;
        case 41: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ELSE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 110: break;
        case 42: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"EXIT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 111: break;
        case 43: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"TEXT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 112: break;
        case 44: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"TIME",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 113: break;
        case 45: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"INIT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 114: break;
        case 46: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"CICLE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 115: break;
        case 47: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ROUTE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 116: break;
        case 48: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"TABLE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 117: break;
        case 49: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"VIRUS",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 118: break;
        case 50: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"START",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 119: break;
        case 51: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SLEEP",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 120: break;
        case 52: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"CREATE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 121: break;
        case 53: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"BIGINT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 122: break;
        case 54: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"DEFINE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 123: break;
        case 55: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SWITCH",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 124: break;
        case 56: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"GROWTH",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 125: break;
        case 57: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ECONOMY",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 126: break;
        case 58: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"TINYINT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 127: break;
        case 59: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"DECIMAL",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 128: break;
        case 60: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"DESTROY",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 129: break;
        case 61: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SEGMENT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 130: break;
        case 62: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"PROGRAM",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 131: break;
        case 63: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"RESOURCE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 132: break;
        case 64: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"BUILDING",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 133: break;
        case 65: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SMALLINT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 134: break;
        case 66: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"REFERENCE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 135: break;
        case 67: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"BEHAVIOUR",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 136: break;
        case 68: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SIMULATION",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 137: break;
        case 69: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"POPULATION",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
