/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/*Seccion de codigo de usuario*/
package analizadorlex;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

//clase de los token devueltos
class Yytoken {
    Yytoken (int numToken,String token, String tipo, int linea, int columna){
        //Contador para el número de tokens reconocidos
        this.numToken = numToken;
        //String del token reconocido
        this.token = new String(token);
        //Tipo de componente léxico encontrado
        this.tipo = tipo;
        //Número de linea
        this.linea = linea;
        //Columna donde empieza el primer carácter del token
        this.columna = columna;
    }
    //Métodos de los atributos de la clase
    public int numToken;
    public String token;
    public String tipo;
    public int linea;
    public int columna;
    //Metodo que devuelve los datos necesarios que escribiremos en un archive de salida
    public String toString() {
        return "Token#"+numToken+": "+token+"|"+"  Componente Lexico:  "+"|"+tipo+" ["+"Linea: "+(linea)+ "]";
    }
}

//--------------------------------------
class ErroresC {
    ErroresC (String token, String tipo, int linea){
        
        //String del token reconocido
        this.token = new String(token);
        //Tipo de componente léxico encontrado
        this.tipo = tipo;
        //Número de linea
        this.linea = linea;

    }
    //Métodos de los atributos de la clase
    public String token;
    public String tipo;
    public int linea;

    //Metodo que devuelve los datos necesarios que escribiremos en un archive de salida
    public String toString() {
        return "Error " + tipo +" |  \" "+token+" \"  | ["+"Linea: "+(linea)+ "] : Se ha introducido un caracter no valido, sustituyalo por un caracter valido";
    }
}



/* Seccion de opciones y declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>alexico.flex</tt>
 */
public class AnalizadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\5\2\0\1\6\22\0\1\4\1\72\1\102\1\3"+
    "\1\107\1\112\1\70\1\115\1\73\1\74\1\66\1\64\1\100\1\65"+
    "\1\110\1\67\12\2\1\101\1\77\1\76\1\63\1\75\1\114\1\117"+
    "\1\17\1\27\1\14\1\40\1\16\1\57\1\54\1\30\1\32\2\1"+
    "\1\46\1\45\1\53\1\33\1\62\1\1\1\15\1\41\1\20\1\34"+
    "\1\31\1\50\1\56\1\42\1\1\1\105\1\0\1\106\1\116\1\111"+
    "\1\120\1\12\1\21\1\7\1\35\1\11\1\60\1\52\1\22\1\24"+
    "\2\1\1\44\1\43\1\51\1\25\1\61\1\1\1\10\1\36\1\13"+
    "\1\26\1\23\1\47\1\55\1\37\1\1\1\103\1\71\1\104\1\121"+
    "\100\0\1\113\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\26\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\0\36\1\1\43\31\1"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\0\1\54\1\55\4\1\1\56\5\1\1\57\41\1"+
    "\1\60\25\1\1\61\1\1\1\62\1\63\5\1\1\64"+
    "\1\65\1\66\1\1\1\67\16\1\1\70\35\1\1\71"+
    "\2\1\1\72\1\1\1\73\12\1\1\74\7\1\1\75"+
    "\2\1\1\76\16\1\1\77\12\1\1\100\5\1\1\101"+
    "\3\1\1\102\5\1\1\103\6\1\1\104\1\105\7\1"+
    "\1\106\1\107\1\110\4\1\1\111\2\1\1\112\4\1"+
    "\1\113\2\1\1\114\3\1\1\115\1\1\1\116\5\1"+
    "\1\117\1\120\10\1\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\u0386\0\u03d8\0\u042a\0\u047c\0\u04ce"+
    "\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba\0\u070c\0\u075e"+
    "\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8\0\u094a\0\u099c\0\u09ee"+
    "\0\u0a40\0\u0148\0\u0148\0\u0a92\0\u0ae4\0\u0148\0\u0b36\0\u0b88"+
    "\0\u0148\0\u0148\0\u0148\0\u0148\0\u0148\0\u0148\0\u0148\0\u0148"+
    "\0\u0148\0\u0148\0\u0148\0\u0148\0\u0148\0\u0148\0\u0148\0\u0148"+
    "\0\u0148\0\u0148\0\366\0\u0bda\0\u0c2c\0\u0c7e\0\u0cd0\0\u0d22"+
    "\0\u0d74\0\u0dc6\0\u0e18\0\u0e6a\0\u0ebc\0\u0f0e\0\u0f60\0\u0fb2"+
    "\0\u1004\0\u1056\0\u10a8\0\u10fa\0\u114c\0\u119e\0\u11f0\0\u1242"+
    "\0\u1294\0\u12e6\0\u1338\0\u138a\0\u13dc\0\u142e\0\u1480\0\u14d2"+
    "\0\u1524\0\122\0\u1576\0\u15c8\0\u161a\0\u166c\0\u16be\0\u1710"+
    "\0\u1762\0\u17b4\0\u1806\0\u1858\0\u18aa\0\u18fc\0\u194e\0\u19a0"+
    "\0\u19f2\0\u1a44\0\u1a96\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30"+
    "\0\u1c82\0\u1cd4\0\u1d26\0\u0148\0\u0148\0\u0148\0\u0148\0\u0148"+
    "\0\u0148\0\u0148\0\u0148\0\u1d78\0\u0148\0\u0148\0\u1dca\0\u1e1c"+
    "\0\u1e6e\0\u1ec0\0\122\0\u1f12\0\u1f64\0\u1fb6\0\u2008\0\u205a"+
    "\0\122\0\u20ac\0\u20fe\0\u2150\0\u21a2\0\u21f4\0\u2246\0\u2298"+
    "\0\u22ea\0\u233c\0\u238e\0\u23e0\0\u2432\0\u2484\0\u24d6\0\u2528"+
    "\0\u257a\0\u25cc\0\u261e\0\u2670\0\u26c2\0\u2714\0\u2766\0\u27b8"+
    "\0\u280a\0\u285c\0\u28ae\0\u2900\0\u2952\0\u29a4\0\u29f6\0\u2a48"+
    "\0\u2a9a\0\u2aec\0\122\0\u2b3e\0\u2b90\0\u2be2\0\u2c34\0\u2c86"+
    "\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce\0\u2e20\0\u2e72\0\u2ec4\0\u2f16"+
    "\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u30b0\0\u3102\0\u3154\0\u31a6"+
    "\0\u0148\0\u31f8\0\122\0\122\0\u324a\0\u329c\0\u32ee\0\u3340"+
    "\0\u3392\0\122\0\122\0\122\0\u33e4\0\122\0\u3436\0\u3488"+
    "\0\u34da\0\u352c\0\u357e\0\u35d0\0\u3622\0\u3674\0\u36c6\0\u3718"+
    "\0\u376a\0\u37bc\0\u380e\0\u3860\0\122\0\u38b2\0\u3904\0\u3956"+
    "\0\u39a8\0\u39fa\0\u3a4c\0\u3a9e\0\u3af0\0\u3b42\0\u3b94\0\u3be6"+
    "\0\u3c38\0\u3c8a\0\u3cdc\0\u3d2e\0\u3d80\0\u3dd2\0\u3e24\0\u3e76"+
    "\0\u3ec8\0\u3f1a\0\u3f6c\0\u3fbe\0\u4010\0\u4062\0\u40b4\0\u4106"+
    "\0\u4158\0\u41aa\0\122\0\u41fc\0\u424e\0\122\0\u42a0\0\122"+
    "\0\u42f2\0\u4344\0\u4396\0\u43e8\0\u443a\0\u448c\0\u44de\0\u4530"+
    "\0\u4582\0\u45d4\0\122\0\u4626\0\u4678\0\u46ca\0\u471c\0\u476e"+
    "\0\u47c0\0\u4812\0\122\0\u4864\0\u48b6\0\122\0\u4908\0\u495a"+
    "\0\u49ac\0\u49fe\0\u4a50\0\u4aa2\0\u4af4\0\u4b46\0\u4b98\0\u4bea"+
    "\0\u4c3c\0\u4c8e\0\u4ce0\0\u4d32\0\122\0\u4d84\0\u4dd6\0\u4e28"+
    "\0\u4e7a\0\u4ecc\0\u4f1e\0\u4f70\0\u4fc2\0\u5014\0\u5066\0\122"+
    "\0\u50b8\0\u510a\0\u515c\0\u51ae\0\u5200\0\122\0\u5252\0\u52a4"+
    "\0\u52f6\0\122\0\u5348\0\u539a\0\u53ec\0\u543e\0\u5490\0\122"+
    "\0\u54e2\0\u5534\0\u5586\0\u55d8\0\u562a\0\u567c\0\122\0\122"+
    "\0\u56ce\0\u5720\0\u5772\0\u57c4\0\u5816\0\u5868\0\u58ba\0\122"+
    "\0\122\0\122\0\u590c\0\u595e\0\u59b0\0\u5a02\0\122\0\u5a54"+
    "\0\u5aa6\0\122\0\u5af8\0\u5b4a\0\u5b9c\0\u5bee\0\122\0\u5c40"+
    "\0\u5c92\0\122\0\u5ce4\0\u5d36\0\u5d88\0\122\0\u5dda\0\122"+
    "\0\u5e2c\0\u5e7e\0\u5ed0\0\u5f22\0\u5f74\0\122\0\122\0\u5fc6"+
    "\0\u6018\0\u606a\0\u60bc\0\u610e\0\u6160\0\u61b2\0\u6204\0\u0148";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\2\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\1\2\1\16"+
    "\1\17\1\2\1\20\1\21\2\2\1\22\1\2\1\23"+
    "\1\24\2\2\1\25\1\26\1\2\1\27\1\30\10\2"+
    "\1\31\1\2\1\32\4\2\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\0\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\0\2\2\4\0"+
    "\54\2\41\0\1\3\120\0\2\73\1\5\1\73\2\0"+
    "\54\73\166\0\1\5\115\0\2\2\4\0\1\2\1\74"+
    "\1\2\1\75\11\2\1\76\36\2\40\0\2\2\4\0"+
    "\2\2\1\77\13\2\1\100\35\2\40\0\2\2\4\0"+
    "\1\101\34\2\1\102\4\2\1\103\3\2\1\104\5\2"+
    "\40\0\2\2\4\0\2\2\1\105\1\106\11\2\1\107"+
    "\36\2\40\0\2\2\4\0\6\2\1\110\1\2\1\111"+
    "\12\2\1\112\30\2\40\0\2\2\4\0\7\2\1\113"+
    "\14\2\1\114\27\2\40\0\2\2\4\0\5\2\1\115"+
    "\27\2\1\116\1\2\1\117\4\2\1\120\2\2\1\121"+
    "\4\2\40\0\2\2\4\0\7\2\1\122\1\123\12\2"+
    "\1\124\30\2\40\0\2\2\4\0\2\2\1\125\12\2"+
    "\1\126\1\2\1\127\34\2\40\0\2\2\4\0\15\2"+
    "\1\130\36\2\40\0\2\2\4\0\42\2\1\131\6\2"+
    "\1\132\2\2\40\0\2\2\4\0\7\2\1\133\13\2"+
    "\1\134\1\2\1\135\26\2\40\0\2\2\4\0\23\2"+
    "\1\136\30\2\40\0\2\2\4\0\44\2\1\137\3\2"+
    "\1\132\3\2\40\0\2\2\4\0\2\2\1\140\51\2"+
    "\40\0\2\2\4\0\2\2\1\141\1\2\1\142\10\2"+
    "\1\143\16\2\1\144\1\145\2\2\1\146\13\2\40\0"+
    "\2\2\4\0\7\2\1\147\44\2\40\0\2\2\4\0"+
    "\7\2\1\150\1\2\1\151\11\2\1\152\12\2\1\153"+
    "\1\154\1\2\1\155\12\2\40\0\2\2\4\0\1\2"+
    "\1\156\52\2\40\0\2\2\4\0\6\2\1\157\45\2"+
    "\40\0\2\2\4\0\1\2\1\160\14\2\1\161\35\2"+
    "\40\0\2\2\4\0\6\2\1\162\15\2\1\163\27\2"+
    "\122\0\1\164\121\0\1\165\1\166\120\0\1\167\1\0"+
    "\1\170\117\0\1\171\121\0\1\172\121\0\1\173\122\0"+
    "\1\174\120\0\1\175\121\0\1\176\37\0\2\2\4\0"+
    "\2\2\1\177\51\2\40\0\2\2\4\0\27\2\1\200"+
    "\5\2\1\201\16\2\40\0\2\2\4\0\1\202\53\2"+
    "\40\0\2\2\4\0\4\2\1\203\22\2\1\204\21\2"+
    "\1\205\2\2\40\0\2\2\4\0\17\2\1\206\34\2"+
    "\40\0\2\2\4\0\16\2\1\207\35\2\40\0\2\2"+
    "\4\0\27\2\1\210\24\2\40\0\2\2\4\0\26\2"+
    "\1\211\25\2\40\0\2\2\4\0\15\2\1\212\36\2"+
    "\40\0\2\2\4\0\46\2\1\213\5\2\40\0\2\2"+
    "\4\0\12\2\1\214\41\2\40\0\2\2\4\0\34\2"+
    "\1\215\5\2\1\216\11\2\40\0\2\2\4\0\7\2"+
    "\1\217\44\2\40\0\2\2\4\0\32\2\1\220\4\2"+
    "\1\221\14\2\40\0\2\2\4\0\5\2\1\222\46\2"+
    "\40\0\2\2\4\0\11\2\1\203\20\2\1\223\15\2"+
    "\1\224\3\2\40\0\2\2\4\0\25\2\1\225\26\2"+
    "\40\0\2\2\4\0\24\2\1\226\27\2\40\0\2\2"+
    "\4\0\2\2\1\227\51\2\40\0\2\2\4\0\32\2"+
    "\1\230\21\2\40\0\2\2\4\0\31\2\1\211\22\2"+
    "\40\0\2\2\4\0\23\2\1\231\30\2\40\0\2\2"+
    "\4\0\47\2\1\232\4\2\40\0\2\2\4\0\20\2"+
    "\1\233\33\2\40\0\2\2\4\0\36\2\1\234\5\2"+
    "\1\235\7\2\40\0\2\2\4\0\13\2\1\236\40\2"+
    "\40\0\2\2\4\0\43\2\1\237\10\2\40\0\2\2"+
    "\4\0\15\2\1\240\36\2\40\0\2\2\4\0\1\2"+
    "\1\241\52\2\40\0\2\2\4\0\15\2\1\242\36\2"+
    "\40\0\2\2\4\0\21\2\1\243\32\2\40\0\2\2"+
    "\4\0\45\2\1\244\6\2\40\0\2\2\4\0\23\2"+
    "\1\245\30\2\40\0\2\2\4\0\6\2\1\246\45\2"+
    "\40\0\2\2\4\0\23\2\1\247\30\2\40\0\2\2"+
    "\4\0\1\250\26\2\1\251\21\2\1\252\2\2\40\0"+
    "\2\2\4\0\4\2\1\253\36\2\1\254\10\2\40\0"+
    "\2\2\4\0\3\2\1\255\50\2\40\0\2\2\4\0"+
    "\34\2\1\256\17\2\40\0\2\2\4\0\3\2\1\257"+
    "\50\2\40\0\2\2\4\0\2\2\1\260\51\2\40\0"+
    "\2\2\4\0\15\2\1\261\36\2\40\0\2\2\4\0"+
    "\5\2\1\262\24\2\1\263\15\2\1\264\3\2\40\0"+
    "\2\2\4\0\11\2\1\253\33\2\1\265\6\2\40\0"+
    "\2\2\4\0\10\2\1\266\43\2\40\0\2\2\4\0"+
    "\36\2\1\267\15\2\40\0\2\2\4\0\10\2\1\270"+
    "\43\2\40\0\2\2\4\0\7\2\1\271\44\2\40\0"+
    "\2\2\4\0\23\2\1\272\30\2\40\0\2\2\4\0"+
    "\16\2\1\273\35\2\40\0\2\2\4\0\24\2\1\274"+
    "\27\2\40\0\2\2\4\0\16\2\1\275\35\2\40\0"+
    "\2\2\4\0\52\2\1\276\1\2\40\0\2\2\4\0"+
    "\24\2\1\277\27\2\40\0\2\2\4\0\53\2\1\300"+
    "\133\0\1\301\26\0\2\2\4\0\3\2\1\302\50\2"+
    "\40\0\2\2\4\0\2\2\1\303\51\2\40\0\2\2"+
    "\4\0\35\2\1\304\16\2\40\0\2\2\4\0\35\2"+
    "\1\305\16\2\40\0\2\2\4\0\16\2\1\306\35\2"+
    "\40\0\2\2\4\0\2\2\1\307\51\2\40\0\2\2"+
    "\4\0\4\2\1\310\47\2\40\0\2\2\4\0\42\2"+
    "\1\311\11\2\40\0\2\2\4\0\2\2\1\312\51\2"+
    "\40\0\2\2\4\0\4\2\1\313\47\2\40\0\2\2"+
    "\4\0\4\2\1\314\47\2\40\0\2\2\4\0\35\2"+
    "\1\315\16\2\40\0\2\2\4\0\2\2\1\316\51\2"+
    "\40\0\2\2\4\0\30\2\1\317\23\2\40\0\2\2"+
    "\4\0\10\2\1\320\43\2\40\0\2\2\4\0\7\2"+
    "\1\303\44\2\40\0\2\2\4\0\37\2\1\304\14\2"+
    "\40\0\2\2\4\0\37\2\1\321\14\2\40\0\2\2"+
    "\4\0\24\2\1\322\27\2\40\0\2\2\4\0\7\2"+
    "\1\323\44\2\40\0\2\2\4\0\11\2\1\324\42\2"+
    "\40\0\2\2\4\0\44\2\1\325\7\2\40\0\2\2"+
    "\4\0\34\2\1\326\17\2\40\0\2\2\4\0\7\2"+
    "\1\312\44\2\40\0\2\2\4\0\11\2\1\313\42\2"+
    "\40\0\2\2\4\0\11\2\1\314\42\2\40\0\2\2"+
    "\4\0\37\2\1\327\14\2\40\0\2\2\4\0\7\2"+
    "\1\316\44\2\40\0\2\2\4\0\33\2\1\330\20\2"+
    "\40\0\2\2\4\0\3\2\1\331\50\2\40\0\2\2"+
    "\4\0\15\2\1\332\36\2\40\0\2\2\4\0\35\2"+
    "\1\333\16\2\40\0\2\2\4\0\17\2\1\334\34\2"+
    "\40\0\2\2\4\0\4\2\1\335\47\2\40\0\2\2"+
    "\4\0\10\2\1\336\43\2\40\0\2\2\4\0\23\2"+
    "\1\337\30\2\40\0\2\2\4\0\37\2\1\340\14\2"+
    "\40\0\2\2\4\0\25\2\1\341\26\2\40\0\2\2"+
    "\4\0\11\2\1\335\42\2\40\0\2\2\4\0\15\2"+
    "\1\342\36\2\40\0\2\2\4\0\4\2\1\343\47\2"+
    "\40\0\2\2\4\0\15\2\1\344\36\2\40\0\2\2"+
    "\4\0\34\2\1\345\17\2\40\0\2\2\4\0\1\2"+
    "\1\346\52\2\40\0\2\2\4\0\17\2\1\347\34\2"+
    "\40\0\2\2\4\0\35\2\1\350\16\2\40\0\2\2"+
    "\4\0\2\2\1\351\51\2\40\0\2\2\4\0\4\2"+
    "\1\352\47\2\40\0\2\2\4\0\23\2\1\353\30\2"+
    "\40\0\2\2\4\0\11\2\1\354\42\2\40\0\2\2"+
    "\4\0\23\2\1\355\30\2\40\0\2\2\4\0\36\2"+
    "\1\356\15\2\40\0\2\2\4\0\6\2\1\357\45\2"+
    "\40\0\2\2\4\0\25\2\1\360\26\2\40\0\2\2"+
    "\4\0\37\2\1\361\14\2\40\0\2\2\4\0\7\2"+
    "\1\362\44\2\40\0\2\2\4\0\11\2\1\363\42\2"+
    "\40\0\2\2\4\0\40\2\1\364\13\2\40\0\2\2"+
    "\4\0\41\2\1\365\12\2\40\0\2\2\4\0\43\2"+
    "\1\366\10\2\40\0\2\2\4\0\17\2\1\367\34\2"+
    "\40\0\2\2\4\0\45\2\1\370\6\2\40\0\2\2"+
    "\4\0\25\2\1\371\26\2\40\0\2\2\4\0\4\2"+
    "\1\372\47\2\40\0\2\2\4\0\2\2\1\373\51\2"+
    "\40\0\2\2\4\0\17\2\1\374\34\2\40\0\2\2"+
    "\4\0\1\2\1\375\52\2\40\0\2\2\4\0\2\2"+
    "\1\376\51\2\40\0\2\2\4\0\16\2\1\377\35\2"+
    "\40\0\2\2\4\0\2\2\1\u0100\51\2\40\0\2\2"+
    "\4\0\15\2\1\u0101\36\2\40\0\2\2\4\0\11\2"+
    "\1\u0102\42\2\40\0\2\2\4\0\7\2\1\373\44\2"+
    "\40\0\2\2\4\0\25\2\1\u0103\26\2\40\0\2\2"+
    "\4\0\6\2\1\u0104\45\2\40\0\2\2\4\0\7\2"+
    "\1\376\44\2\40\0\2\2\4\0\24\2\1\u0105\27\2"+
    "\40\0\2\2\4\0\2\2\1\u0106\51\2\40\0\2\2"+
    "\4\0\7\2\1\u0100\44\2\40\0\2\2\4\0\23\2"+
    "\1\u0107\30\2\40\0\2\2\4\0\14\2\1\u0108\37\2"+
    "\40\0\2\2\4\0\42\2\1\u0109\11\2\40\0\2\2"+
    "\4\0\26\2\1\u010a\25\2\40\0\2\2\4\0\27\2"+
    "\1\u010b\24\2\40\0\2\2\4\0\22\2\1\u010c\31\2"+
    "\40\0\2\2\4\0\44\2\1\u010d\7\2\40\0\2\2"+
    "\4\0\31\2\1\u010e\22\2\40\0\2\2\4\0\32\2"+
    "\1\u010b\21\2\40\0\2\2\4\0\34\2\1\u010f\17\2"+
    "\40\0\2\2\4\0\1\2\1\u0110\52\2\40\0\2\2"+
    "\4\0\42\2\1\u0111\11\2\40\0\2\2\4\0\2\2"+
    "\1\u0112\51\2\40\0\2\2\4\0\4\2\1\u0113\47\2"+
    "\40\0\2\2\4\0\35\2\1\u0114\16\2\40\0\2\2"+
    "\4\0\35\2\1\u0115\16\2\40\0\2\2\4\0\52\2"+
    "\1\u0116\1\2\40\0\2\2\4\0\1\u0117\53\2\40\0"+
    "\2\2\4\0\36\2\1\u0118\15\2\40\0\2\2\4\0"+
    "\6\2\1\u0119\45\2\40\0\2\2\4\0\44\2\1\u011a"+
    "\7\2\40\0\2\2\4\0\7\2\1\u011b\44\2\40\0"+
    "\2\2\4\0\11\2\1\u0113\42\2\40\0\2\2\4\0"+
    "\37\2\1\u011c\14\2\40\0\2\2\4\0\37\2\1\u011d"+
    "\14\2\40\0\2\2\4\0\53\2\1\u0116\40\0\2\2"+
    "\4\0\5\2\1\u011e\46\2\40\0\2\2\4\0\4\2"+
    "\1\u011f\47\2\40\0\2\2\4\0\11\2\1\u0120\42\2"+
    "\40\0\2\2\4\0\1\2\1\u0121\52\2\40\0\2\2"+
    "\4\0\35\2\1\u0122\16\2\40\0\2\2\4\0\6\2"+
    "\1\u0123\45\2\40\0\2\2\4\0\37\2\1\u0124\14\2"+
    "\40\0\2\2\4\0\2\2\1\u0125\51\2\40\0\2\2"+
    "\4\0\1\2\1\u0126\52\2\40\0\2\2\4\0\2\2"+
    "\1\u0127\51\2\40\0\2\2\4\0\34\2\1\u0128\17\2"+
    "\40\0\2\2\4\0\42\2\1\u0129\11\2\40\0\2\2"+
    "\4\0\7\2\1\u0125\44\2\40\0\2\2\4\0\6\2"+
    "\1\u012a\45\2\40\0\2\2\4\0\7\2\1\u012b\44\2"+
    "\40\0\2\2\4\0\36\2\1\u012c\15\2\40\0\2\2"+
    "\4\0\42\2\1\u012d\11\2\40\0\2\2\4\0\44\2"+
    "\1\u012e\7\2\40\0\2\2\4\0\15\2\1\u012f\36\2"+
    "\40\0\2\2\4\0\4\2\1\u0130\47\2\40\0\2\2"+
    "\4\0\15\2\1\u0131\36\2\40\0\2\2\4\0\23\2"+
    "\1\u0132\30\2\40\0\2\2\4\0\11\2\1\u0130\42\2"+
    "\40\0\2\2\4\0\23\2\1\u0133\30\2\40\0\2\2"+
    "\4\0\3\2\1\u0134\50\2\40\0\2\2\4\0\16\2"+
    "\1\u0135\35\2\40\0\2\2\4\0\2\2\1\u0136\51\2"+
    "\40\0\2\2\4\0\42\2\1\u0137\11\2\40\0\2\2"+
    "\4\0\3\2\1\u0138\50\2\40\0\2\2\4\0\15\2"+
    "\1\u0139\36\2\40\0\2\2\4\0\13\2\1\u013a\40\2"+
    "\40\0\2\2\4\0\10\2\1\u013b\43\2\40\0\2\2"+
    "\4\0\24\2\1\u013c\27\2\40\0\2\2\4\0\7\2"+
    "\1\u0136\44\2\40\0\2\2\4\0\44\2\1\u013d\7\2"+
    "\40\0\2\2\4\0\10\2\1\u013e\43\2\40\0\2\2"+
    "\4\0\23\2\1\u013f\30\2\40\0\2\2\4\0\21\2"+
    "\1\u013a\32\2\40\0\2\2\4\0\13\2\1\u0140\40\2"+
    "\40\0\2\2\4\0\21\2\1\u0140\32\2\40\0\2\2"+
    "\4\0\3\2\1\u0141\50\2\40\0\2\2\4\0\3\2"+
    "\1\u0142\50\2\40\0\2\2\4\0\10\2\1\u0143\43\2"+
    "\40\0\2\2\4\0\10\2\1\u0144\43\2\40\0\2\2"+
    "\4\0\1\u0145\53\2\40\0\2\2\4\0\42\2\1\u0146"+
    "\11\2\40\0\2\2\4\0\30\2\1\u0147\23\2\40\0"+
    "\2\2\4\0\4\2\1\u0148\47\2\40\0\2\2\4\0"+
    "\5\2\1\u0149\46\2\40\0\2\2\4\0\44\2\1\u014a"+
    "\7\2\40\0\2\2\4\0\33\2\1\u0147\20\2\40\0"+
    "\2\2\4\0\4\2\1\u014b\47\2\40\0\2\2\4\0"+
    "\11\2\1\u0148\42\2\40\0\2\2\4\0\16\2\1\u014c"+
    "\35\2\40\0\2\2\4\0\42\2\1\u014d\11\2\40\0"+
    "\2\2\4\0\24\2\1\u014e\27\2\40\0\2\2\4\0"+
    "\44\2\1\u014f\7\2\40\0\2\2\4\0\35\2\1\u0150"+
    "\16\2\40\0\2\2\4\0\30\2\1\u0151\23\2\40\0"+
    "\2\2\4\0\4\2\1\u0152\47\2\40\0\2\2\4\0"+
    "\4\2\1\u0153\47\2\40\0\2\2\4\0\42\2\1\u0154"+
    "\11\2\40\0\2\2\4\0\37\2\1\u0150\14\2\40\0"+
    "\2\2\4\0\33\2\1\u0151\20\2\40\0\2\2\4\0"+
    "\11\2\1\u0152\42\2\40\0\2\2\4\0\11\2\1\u0155"+
    "\42\2\40\0\2\2\4\0\44\2\1\u0156\7\2\40\0"+
    "\2\2\4\0\34\2\1\u0157\17\2\40\0\2\2\4\0"+
    "\4\2\1\u0158\47\2\40\0\2\2\4\0\36\2\1\u0157"+
    "\15\2\40\0\2\2\4\0\11\2\1\u0159\42\2\40\0"+
    "\2\2\4\0\2\2\1\u015a\51\2\40\0\2\2\4\0"+
    "\1\u015b\53\2\40\0\2\2\4\0\7\2\1\u015a\44\2"+
    "\40\0\2\2\4\0\5\2\1\u015c\46\2\40\0\2\2"+
    "\4\0\16\2\1\u015d\35\2\40\0\2\2\4\0\17\2"+
    "\1\u015e\34\2\40\0\2\2\4\0\43\2\1\u015f\10\2"+
    "\40\0\2\2\4\0\25\2\1\u0160\26\2\40\0\2\2"+
    "\4\0\45\2\1\u015f\6\2\40\0\2\2\4\0\15\2"+
    "\1\u0161\36\2\40\0\2\2\4\0\4\2\1\u0162\47\2"+
    "\40\0\2\2\4\0\23\2\1\u0163\30\2\40\0\2\2"+
    "\4\0\11\2\1\u0162\42\2\40\0\2\2\4\0\15\2"+
    "\1\u0164\36\2\40\0\2\2\4\0\23\2\1\u0165\30\2"+
    "\40\0\2\2\4\0\2\2\1\u0166\51\2\40\0\2\2"+
    "\4\0\7\2\1\u0166\44\2\40\0\2\2\4\0\27\2"+
    "\1\u0167\24\2\40\0\2\2\4\0\1\2\1\u0168\52\2"+
    "\40\0\2\2\4\0\6\2\1\u0168\45\2\40\0\2\2"+
    "\4\0\16\2\1\u0169\35\2\40\0\2\2\4\0\24\2"+
    "\1\u016a\27\2\40\0\2\2\4\0\16\2\1\u016b\35\2"+
    "\40\0\2\2\4\0\24\2\1\u016c\27\2\40\0\2\2"+
    "\4\0\42\2\1\u016d\11\2\40\0\2\2\4\0\42\2"+
    "\1\u016e\11\2\40\0\2\2\4\0\44\2\1\u016e\7\2"+
    "\40\0\2\2\4\0\42\2\1\u016f\11\2\40\0\2\2"+
    "\4\0\44\2\1\u016f\7\2\40\0\2\2\4\0\16\2"+
    "\1\u0170\35\2\40\0\2\2\4\0\14\2\1\u0171\37\2"+
    "\40\0\2\2\4\0\3\2\1\u0172\50\2\40\0\2\2"+
    "\4\0\35\2\1\u0173\16\2\40\0\2\2\4\0\15\2"+
    "\1\u0174\36\2\40\0\2\2\4\0\26\2\1\u0175\25\2"+
    "\40\0\2\2\4\0\16\2\1\u0176\35\2\40\0\2\2"+
    "\4\0\27\2\1\u0177\24\2\40\0\2\2\4\0\54\2"+
    "\24\0\1\u0178\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25174];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\1\11\34\1\2\11\2\1\1\11\2\1"+
    "\22\11\1\0\70\1\10\11\1\0\2\11\102\1\1\11"+
    "\266\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	
    private int contador;
    private ArrayList<Yytoken> tokens;
    private ArrayList<ErroresC> errores;

	private void writeOutputFile() throws IOException{
			String filename = "file.out";
			BufferedWriter out = new BufferedWriter(
				new FileWriter(filename));
            System.out.println("\n*** Tokens guardados en archivo ***\n");
			for(Yytoken t: this.tokens){
				System.out.println(t);
				out.write(t + "\n");
			}
			out.close();

        //-----------------------------------------------------------------------
            String filenameE = "errores.txt";
			BufferedWriter error = new BufferedWriter(
				new FileWriter(filenameE));
            System.out.println("\n*** Tokens guardados en archivo ***\n");
			for(ErroresC t: this.errores){
				System.out.println(t);
				error.write(t + "\n");
			}
			error.close();

	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
      contador = 0;
	tokens = new ArrayList<Yytoken>();
        errores = new ArrayList<ErroresC>();
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try{
		this.writeOutputFile();
        //System.exit(0);
	}catch(IOException ioe){
		ioe.printStackTrace();
	}

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"id",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 82: break;
        case 2: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"num",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 83: break;
        case 3: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"gato",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 84: break;
        case 4: 
          { //ignorar
          }
        case 85: break;
        case 5: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"asignacion",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 86: break;
        case 6: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"suma",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 87: break;
        case 7: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"resta",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 88: break;
        case 8: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"multiplicacion",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 89: break;
        case 9: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"division",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 90: break;
        case 10: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"and",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 91: break;
        case 11: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"or",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 92: break;
        case 12: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"not",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 93: break;
        case 13: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"parentesis_apertura",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 94: break;
        case 14: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"parentesis_cierre",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 95: break;
        case 15: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Mayor_que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 96: break;
        case 16: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Menor_que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 97: break;
        case 17: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"terminador_sentencia",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 98: break;
        case 18: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"separador",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 99: break;
        case 19: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"puntos_de_rutina",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 100: break;
        case 20: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"comillas",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 101: break;
        case 21: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"llave_apertura",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 102: break;
        case 22: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"llave_cierre",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 103: break;
        case 23: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"corchete_apertura",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 104: break;
        case 24: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"corchete_cierre",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"corchete_cierre",yyline);
    errores.add(e);
    return t;
          }
        case 105: break;
        case 25: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"punto",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 106: break;
        case 26: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"guion_bajo",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 107: break;
        case 27: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Porciento",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 108: break;
        case 28: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Apertura_interrogacion",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 109: break;
        case 29: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Cierre_interrogacion",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 110: break;
        case 30: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Apostrofe",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 111: break;
        case 31: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Acento circunflejo",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 112: break;
        case 32: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Arroba",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 113: break;
        case 33: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Acento grave",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 114: break;
        case 34: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Virgulilla",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 115: break;
        case 35: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"IF",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 116: break;
        case 36: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"igual que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 117: break;
        case 37: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Suma_sobre_asignación_previa",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 118: break;
        case 38: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"incremento",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 119: break;
        case 39: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Resta_sobre_asignacion_previa",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 120: break;
        case 40: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"decremento",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 121: break;
        case 41: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Multiplicacion_sobre_asignacion_previa",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 122: break;
        case 42: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Division_sobre_asignacion_previa",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 123: break;
        case 43: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"distinto",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 124: break;
        case 44: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Mayor_igual_que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 125: break;
        case 45: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Menor_igual_que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 126: break;
        case 46: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"RET",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 127: break;
        case 47: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"END",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 128: break;
        case 48: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SET",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 129: break;
        case 49: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"xor",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 130: break;
        case 50: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"CASE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 131: break;
        case 51: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"CALL",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 132: break;
        case 52: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ELSE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 133: break;
        case 53: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"EXIT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 134: break;
        case 54: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"TEXT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 135: break;
        case 55: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"TIME",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 136: break;
        case 56: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"INIT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 137: break;
        case 57: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"CICLE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 138: break;
        case 58: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ROUTE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 139: break;
        case 59: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"TABLE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 140: break;
        case 60: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"VIRUS",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 141: break;
        case 61: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"START",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 142: break;
        case 62: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SLEEP",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 143: break;
        case 63: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"CREATE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 144: break;
        case 64: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"BIGINT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 145: break;
        case 65: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"DEFINE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 146: break;
        case 66: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SWITCH",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 147: break;
        case 67: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"GROWTH",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 148: break;
        case 68: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ECONOMY",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 149: break;
        case 69: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"TINYINT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 150: break;
        case 70: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"DECIMAL",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 151: break;
        case 71: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"DESTROY",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 152: break;
        case 72: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SEGMENT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 153: break;
        case 73: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"PROGRAM",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 154: break;
        case 74: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"RESOURCE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 155: break;
        case 75: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"BUILDING",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 156: break;
        case 76: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SMALLINT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 157: break;
        case 77: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"REFERENCE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 158: break;
        case 78: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"BEHAVIOUR",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 159: break;
        case 79: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SIMULATION",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 160: break;
        case 80: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"POPULATION",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 161: break;
        case 81: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"signo_pesos",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 162: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
