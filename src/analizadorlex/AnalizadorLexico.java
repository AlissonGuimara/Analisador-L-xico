/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/*Seccion de codigo de usuario*/
package analizadorlex;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

//clase de los token devueltos
class Yytoken {
    Yytoken (int numToken,String token, String tipo, int linea, int columna){
        //Contador para el número de tokens reconocidos
        this.numToken = numToken;
        //String del token reconocido
        this.token = new String(token);
        //Tipo de componente léxico encontrado
        this.tipo = tipo;
        //Número de linea
        this.linea = linea;
        //Columna donde empieza el primer carácter del token
        this.columna = columna;
    }
    //Métodos de los atributos de la clase
    public int numToken;
    public String token;
    public String tipo;
    public int linea;
    public int columna;
    //Metodo que devuelve los datos necesarios que escribiremos en un archive de salida
    public String toString() {
        return "Token#"+numToken+": "+token+"|"+"  Componente Lexico:  "+"|"+tipo+" ["+"Linea: "+(linea)+ "]";
    }
}

//--------------------------------------
class ErroresC {
    ErroresC (String token, String tipo, int linea){
        
        //String del token reconocido
        this.token = new String(token);
        //Tipo de componente léxico encontrado
        this.tipo = tipo;
        //Número de linea
        this.linea = linea;

    }
    //Métodos de los atributos de la clase
    public String token;
    public String tipo;
    public int linea;

    //Metodo que devuelve los datos necesarios que escribiremos en un archive de salida
    public String toString() {
        return "Error " + tipo +" | Error Lexico | \" "+token+" \"  | ["+"Linea: "+(linea)+ "] : Se ha introducido un caracter no valido, sustituyalo por un caracter valido";
    }
}



/* Seccion de opciones y declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>alexico.flex</tt>
 */
public class AnalizadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\5\2\0\1\6\22\0\1\4\1\72\1\102\1\3"+
    "\1\107\1\112\1\70\1\115\1\73\1\74\1\66\1\64\1\100\1\65"+
    "\1\110\1\67\12\2\1\101\1\77\1\76\1\63\1\75\1\114\1\117"+
    "\1\17\1\27\1\14\1\40\1\16\1\57\1\54\1\30\1\32\2\1"+
    "\1\46\1\45\1\53\1\33\1\62\1\1\1\15\1\41\1\20\1\34"+
    "\1\31\1\50\1\56\1\42\1\1\1\105\1\122\1\106\1\116\1\111"+
    "\1\120\1\12\1\21\1\7\1\35\1\11\1\60\1\52\1\22\1\24"+
    "\2\1\1\44\1\43\1\51\1\25\1\61\1\1\1\10\1\36\1\13"+
    "\1\26\1\23\1\47\1\55\1\37\1\1\1\103\1\71\1\104\1\121"+
    "\42\0\1\123\6\0\1\124\3\0\1\125\3\0\1\126\3\0\1\127"+
    "\12\0\1\113\1\0\1\130\7\0\1\130\3\0\1\130\5\0\1\130"+
    "\6\0\1\130\6\0\1\130\7\0\1\130\3\0\1\130\5\0\1\130"+
    "\6\0\1\130\uff05\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\26\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\0\35\1\1\53\31\1"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\0\1\64\1\65\4\1\1\66\5\1\1\67\40\1"+
    "\1\70\25\1\1\71\1\1\1\72\1\73\5\1\1\74"+
    "\1\75\1\76\1\1\1\77\15\1\1\100\35\1\1\101"+
    "\2\1\1\102\1\1\1\103\11\1\1\104\7\1\1\105"+
    "\2\1\1\106\16\1\1\107\11\1\1\110\5\1\1\111"+
    "\3\1\1\112\5\1\1\113\6\1\1\114\1\115\6\1"+
    "\1\116\1\117\1\120\4\1\1\121\2\1\1\122\3\1"+
    "\1\123\2\1\1\124\3\1\1\125\1\126\4\1\1\127"+
    "\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\131\0\262\0\u010b\0\u0164\0\u01bd\0\u0216\0\u026f"+
    "\0\u02c8\0\u0321\0\u037a\0\u03d3\0\u042c\0\u0485\0\u04de\0\u0537"+
    "\0\u0590\0\u05e9\0\u0642\0\u069b\0\u06f4\0\u074d\0\u07a6\0\u07ff"+
    "\0\u0858\0\u08b1\0\u090a\0\u0963\0\u09bc\0\u0a15\0\u0a6e\0\u0ac7"+
    "\0\u0b20\0\u0164\0\u0164\0\u0b79\0\u0bd2\0\u0164\0\u0c2b\0\u0c84"+
    "\0\u0164\0\u0164\0\u0164\0\u0164\0\u0164\0\u0164\0\u0164\0\u0164"+
    "\0\u0164\0\u0164\0\u0164\0\u0164\0\u0164\0\u0164\0\u0164\0\u0164"+
    "\0\u0164\0\u0164\0\u0164\0\u0164\0\u0164\0\u0164\0\u0164\0\u0164"+
    "\0\u0164\0\u0164\0\u010b\0\u0cdd\0\u0d36\0\u0d8f\0\u0de8\0\u0e41"+
    "\0\u0e9a\0\u0ef3\0\u0f4c\0\u0fa5\0\u0ffe\0\u1057\0\u10b0\0\u1109"+
    "\0\u1162\0\u11bb\0\u1214\0\u126d\0\u12c6\0\u131f\0\u1378\0\u13d1"+
    "\0\u142a\0\u1483\0\u14dc\0\u1535\0\u158e\0\u15e7\0\u1640\0\u1699"+
    "\0\131\0\u16f2\0\u174b\0\u17a4\0\u17fd\0\u1856\0\u18af\0\u1908"+
    "\0\u1961\0\u19ba\0\u1a13\0\u1a6c\0\u1ac5\0\u1b1e\0\u1b77\0\u1bd0"+
    "\0\u1c29\0\u1c82\0\u1cdb\0\u1d34\0\u1d8d\0\u1de6\0\u1e3f\0\u1e98"+
    "\0\u1ef1\0\u1f4a\0\u0164\0\u0164\0\u0164\0\u0164\0\u0164\0\u0164"+
    "\0\u0164\0\u0164\0\u1fa3\0\u0164\0\u0164\0\u1ffc\0\u2055\0\u20ae"+
    "\0\u2107\0\131\0\u2160\0\u21b9\0\u2212\0\u226b\0\u22c4\0\131"+
    "\0\u231d\0\u2376\0\u23cf\0\u2428\0\u2481\0\u24da\0\u2533\0\u258c"+
    "\0\u25e5\0\u263e\0\u2697\0\u26f0\0\u2749\0\u27a2\0\u27fb\0\u2854"+
    "\0\u28ad\0\u2906\0\u295f\0\u29b8\0\u2a11\0\u2a6a\0\u2ac3\0\u2b1c"+
    "\0\u2b75\0\u2bce\0\u2c27\0\u2c80\0\u2cd9\0\u2d32\0\u2d8b\0\u2de4"+
    "\0\131\0\u2e3d\0\u2e96\0\u2eef\0\u2f48\0\u2fa1\0\u2ffa\0\u3053"+
    "\0\u30ac\0\u3105\0\u315e\0\u31b7\0\u3210\0\u3269\0\u32c2\0\u331b"+
    "\0\u3374\0\u33cd\0\u3426\0\u347f\0\u34d8\0\u3531\0\u0164\0\u358a"+
    "\0\131\0\131\0\u35e3\0\u363c\0\u3695\0\u36ee\0\u3747\0\131"+
    "\0\131\0\131\0\u37a0\0\131\0\u37f9\0\u3852\0\u38ab\0\u3904"+
    "\0\u395d\0\u39b6\0\u3a0f\0\u3a68\0\u3ac1\0\u3b1a\0\u3b73\0\u3bcc"+
    "\0\u3c25\0\131\0\u3c7e\0\u3cd7\0\u3d30\0\u3d89\0\u3de2\0\u3e3b"+
    "\0\u3e94\0\u3eed\0\u3f46\0\u3f9f\0\u3ff8\0\u4051\0\u40aa\0\u4103"+
    "\0\u415c\0\u41b5\0\u420e\0\u4267\0\u42c0\0\u4319\0\u4372\0\u43cb"+
    "\0\u4424\0\u447d\0\u44d6\0\u452f\0\u4588\0\u45e1\0\u463a\0\131"+
    "\0\u4693\0\u46ec\0\131\0\u4745\0\131\0\u479e\0\u47f7\0\u4850"+
    "\0\u48a9\0\u4902\0\u495b\0\u49b4\0\u4a0d\0\u4a66\0\131\0\u4abf"+
    "\0\u4b18\0\u4b71\0\u4bca\0\u4c23\0\u4c7c\0\u4cd5\0\131\0\u4d2e"+
    "\0\u4d87\0\131\0\u4de0\0\u4e39\0\u4e92\0\u4eeb\0\u4f44\0\u4f9d"+
    "\0\u4ff6\0\u504f\0\u50a8\0\u5101\0\u515a\0\u51b3\0\u520c\0\u5265"+
    "\0\131\0\u52be\0\u5317\0\u5370\0\u53c9\0\u5422\0\u547b\0\u54d4"+
    "\0\u552d\0\u5586\0\131\0\u55df\0\u5638\0\u5691\0\u56ea\0\u5743"+
    "\0\131\0\u579c\0\u57f5\0\u584e\0\131\0\u58a7\0\u5900\0\u5959"+
    "\0\u59b2\0\u5a0b\0\131\0\u5a64\0\u5abd\0\u5b16\0\u5b6f\0\u5bc8"+
    "\0\u5c21\0\131\0\131\0\u5c7a\0\u5cd3\0\u5d2c\0\u5d85\0\u5dde"+
    "\0\u5e37\0\131\0\131\0\131\0\u5e90\0\u5ee9\0\u5f42\0\u5f9b"+
    "\0\131\0\u5ff4\0\u604d\0\131\0\u60a6\0\u60ff\0\u6158\0\131"+
    "\0\u61b1\0\u620a\0\131\0\u6263\0\u62bc\0\u6315\0\131\0\131"+
    "\0\u636e\0\u63c7\0\u6420\0\u6479\0\131\0\131";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\2\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\1\2\1\16"+
    "\1\17\1\2\1\20\1\21\2\2\1\22\1\2\1\23"+
    "\1\24\2\2\1\25\1\26\1\2\1\27\1\30\10\2"+
    "\1\31\1\2\1\32\4\2\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\0\2\2\4\0\54\2"+
    "\50\0\1\3\127\0\2\103\1\5\1\103\2\0\54\103"+
    "\204\0\1\5\124\0\2\2\4\0\1\2\1\104\1\2"+
    "\1\105\11\2\1\106\36\2\47\0\2\2\4\0\2\2"+
    "\1\107\13\2\1\110\35\2\47\0\2\2\4\0\1\111"+
    "\34\2\1\112\4\2\1\113\3\2\1\114\5\2\47\0"+
    "\2\2\4\0\2\2\1\115\1\116\11\2\1\117\36\2"+
    "\47\0\2\2\4\0\6\2\1\120\1\2\1\121\12\2"+
    "\1\122\30\2\47\0\2\2\4\0\7\2\1\123\14\2"+
    "\1\124\27\2\47\0\2\2\4\0\5\2\1\125\31\2"+
    "\1\126\4\2\1\127\2\2\1\130\4\2\47\0\2\2"+
    "\4\0\7\2\1\131\1\132\12\2\1\133\30\2\47\0"+
    "\2\2\4\0\2\2\1\134\12\2\1\135\1\2\1\136"+
    "\34\2\47\0\2\2\4\0\15\2\1\137\36\2\47\0"+
    "\2\2\4\0\42\2\1\140\6\2\1\141\2\2\47\0"+
    "\2\2\4\0\7\2\1\142\13\2\1\143\1\2\1\144"+
    "\26\2\47\0\2\2\4\0\23\2\1\145\30\2\47\0"+
    "\2\2\4\0\44\2\1\146\3\2\1\141\3\2\47\0"+
    "\2\2\4\0\2\2\1\147\51\2\47\0\2\2\4\0"+
    "\2\2\1\150\1\2\1\151\10\2\1\152\16\2\1\153"+
    "\1\154\2\2\1\155\13\2\47\0\2\2\4\0\7\2"+
    "\1\156\44\2\47\0\2\2\4\0\7\2\1\157\1\2"+
    "\1\160\11\2\1\161\12\2\1\162\1\163\1\2\1\164"+
    "\12\2\47\0\2\2\4\0\1\2\1\165\52\2\47\0"+
    "\2\2\4\0\6\2\1\166\45\2\47\0\2\2\4\0"+
    "\1\2\1\167\14\2\1\170\35\2\47\0\2\2\4\0"+
    "\6\2\1\171\15\2\1\172\27\2\131\0\1\173\130\0"+
    "\1\174\1\175\127\0\1\176\1\0\1\177\126\0\1\200"+
    "\130\0\1\201\130\0\1\202\131\0\1\203\127\0\1\204"+
    "\130\0\1\205\46\0\2\2\4\0\2\2\1\206\51\2"+
    "\47\0\2\2\4\0\27\2\1\207\5\2\1\210\16\2"+
    "\47\0\2\2\4\0\1\211\53\2\47\0\2\2\4\0"+
    "\4\2\1\212\22\2\1\213\21\2\1\214\2\2\47\0"+
    "\2\2\4\0\17\2\1\215\34\2\47\0\2\2\4\0"+
    "\16\2\1\216\35\2\47\0\2\2\4\0\27\2\1\217"+
    "\24\2\47\0\2\2\4\0\26\2\1\220\25\2\47\0"+
    "\2\2\4\0\15\2\1\221\36\2\47\0\2\2\4\0"+
    "\46\2\1\222\5\2\47\0\2\2\4\0\12\2\1\223"+
    "\41\2\47\0\2\2\4\0\34\2\1\224\5\2\1\225"+
    "\11\2\47\0\2\2\4\0\7\2\1\226\44\2\47\0"+
    "\2\2\4\0\32\2\1\227\4\2\1\230\14\2\47\0"+
    "\2\2\4\0\5\2\1\231\46\2\47\0\2\2\4\0"+
    "\11\2\1\212\20\2\1\232\15\2\1\233\3\2\47\0"+
    "\2\2\4\0\25\2\1\234\26\2\47\0\2\2\4\0"+
    "\24\2\1\235\27\2\47\0\2\2\4\0\32\2\1\236"+
    "\21\2\47\0\2\2\4\0\31\2\1\220\22\2\47\0"+
    "\2\2\4\0\23\2\1\237\30\2\47\0\2\2\4\0"+
    "\47\2\1\240\4\2\47\0\2\2\4\0\20\2\1\241"+
    "\33\2\47\0\2\2\4\0\36\2\1\242\5\2\1\243"+
    "\7\2\47\0\2\2\4\0\13\2\1\244\40\2\47\0"+
    "\2\2\4\0\43\2\1\245\10\2\47\0\2\2\4\0"+
    "\15\2\1\246\36\2\47\0\2\2\4\0\1\2\1\247"+
    "\52\2\47\0\2\2\4\0\15\2\1\250\36\2\47\0"+
    "\2\2\4\0\21\2\1\251\32\2\47\0\2\2\4\0"+
    "\45\2\1\252\6\2\47\0\2\2\4\0\23\2\1\253"+
    "\30\2\47\0\2\2\4\0\6\2\1\254\45\2\47\0"+
    "\2\2\4\0\23\2\1\255\30\2\47\0\2\2\4\0"+
    "\1\256\26\2\1\257\21\2\1\260\2\2\47\0\2\2"+
    "\4\0\4\2\1\261\36\2\1\262\10\2\47\0\2\2"+
    "\4\0\3\2\1\263\50\2\47\0\2\2\4\0\34\2"+
    "\1\264\17\2\47\0\2\2\4\0\3\2\1\265\50\2"+
    "\47\0\2\2\4\0\2\2\1\266\51\2\47\0\2\2"+
    "\4\0\15\2\1\267\36\2\47\0\2\2\4\0\5\2"+
    "\1\270\24\2\1\271\15\2\1\272\3\2\47\0\2\2"+
    "\4\0\11\2\1\261\33\2\1\273\6\2\47\0\2\2"+
    "\4\0\10\2\1\274\43\2\47\0\2\2\4\0\36\2"+
    "\1\275\15\2\47\0\2\2\4\0\10\2\1\276\43\2"+
    "\47\0\2\2\4\0\7\2\1\277\44\2\47\0\2\2"+
    "\4\0\23\2\1\300\30\2\47\0\2\2\4\0\16\2"+
    "\1\301\35\2\47\0\2\2\4\0\24\2\1\302\27\2"+
    "\47\0\2\2\4\0\16\2\1\303\35\2\47\0\2\2"+
    "\4\0\52\2\1\304\1\2\47\0\2\2\4\0\24\2"+
    "\1\305\27\2\47\0\2\2\4\0\53\2\1\306\142\0"+
    "\1\307\35\0\2\2\4\0\3\2\1\310\50\2\47\0"+
    "\2\2\4\0\2\2\1\311\51\2\47\0\2\2\4\0"+
    "\35\2\1\312\16\2\47\0\2\2\4\0\35\2\1\313"+
    "\16\2\47\0\2\2\4\0\16\2\1\314\35\2\47\0"+
    "\2\2\4\0\2\2\1\315\51\2\47\0\2\2\4\0"+
    "\4\2\1\316\47\2\47\0\2\2\4\0\42\2\1\317"+
    "\11\2\47\0\2\2\4\0\2\2\1\320\51\2\47\0"+
    "\2\2\4\0\4\2\1\321\47\2\47\0\2\2\4\0"+
    "\4\2\1\322\47\2\47\0\2\2\4\0\35\2\1\323"+
    "\16\2\47\0\2\2\4\0\2\2\1\324\51\2\47\0"+
    "\2\2\4\0\30\2\1\325\23\2\47\0\2\2\4\0"+
    "\10\2\1\326\43\2\47\0\2\2\4\0\7\2\1\311"+
    "\44\2\47\0\2\2\4\0\37\2\1\312\14\2\47\0"+
    "\2\2\4\0\37\2\1\327\14\2\47\0\2\2\4\0"+
    "\24\2\1\330\27\2\47\0\2\2\4\0\7\2\1\331"+
    "\44\2\47\0\2\2\4\0\11\2\1\332\42\2\47\0"+
    "\2\2\4\0\44\2\1\333\7\2\47\0\2\2\4\0"+
    "\7\2\1\320\44\2\47\0\2\2\4\0\11\2\1\321"+
    "\42\2\47\0\2\2\4\0\11\2\1\322\42\2\47\0"+
    "\2\2\4\0\37\2\1\334\14\2\47\0\2\2\4\0"+
    "\7\2\1\324\44\2\47\0\2\2\4\0\33\2\1\335"+
    "\20\2\47\0\2\2\4\0\3\2\1\336\50\2\47\0"+
    "\2\2\4\0\15\2\1\337\36\2\47\0\2\2\4\0"+
    "\35\2\1\340\16\2\47\0\2\2\4\0\17\2\1\341"+
    "\34\2\47\0\2\2\4\0\4\2\1\342\47\2\47\0"+
    "\2\2\4\0\10\2\1\343\43\2\47\0\2\2\4\0"+
    "\23\2\1\344\30\2\47\0\2\2\4\0\37\2\1\345"+
    "\14\2\47\0\2\2\4\0\25\2\1\346\26\2\47\0"+
    "\2\2\4\0\11\2\1\342\42\2\47\0\2\2\4\0"+
    "\15\2\1\347\36\2\47\0\2\2\4\0\4\2\1\350"+
    "\47\2\47\0\2\2\4\0\15\2\1\351\36\2\47\0"+
    "\2\2\4\0\34\2\1\352\17\2\47\0\2\2\4\0"+
    "\1\2\1\353\52\2\47\0\2\2\4\0\17\2\1\354"+
    "\34\2\47\0\2\2\4\0\35\2\1\355\16\2\47\0"+
    "\2\2\4\0\2\2\1\356\51\2\47\0\2\2\4\0"+
    "\4\2\1\357\47\2\47\0\2\2\4\0\23\2\1\360"+
    "\30\2\47\0\2\2\4\0\11\2\1\361\42\2\47\0"+
    "\2\2\4\0\23\2\1\362\30\2\47\0\2\2\4\0"+
    "\36\2\1\363\15\2\47\0\2\2\4\0\6\2\1\364"+
    "\45\2\47\0\2\2\4\0\25\2\1\365\26\2\47\0"+
    "\2\2\4\0\37\2\1\366\14\2\47\0\2\2\4\0"+
    "\7\2\1\367\44\2\47\0\2\2\4\0\11\2\1\370"+
    "\42\2\47\0\2\2\4\0\40\2\1\371\13\2\47\0"+
    "\2\2\4\0\41\2\1\372\12\2\47\0\2\2\4\0"+
    "\43\2\1\373\10\2\47\0\2\2\4\0\17\2\1\374"+
    "\34\2\47\0\2\2\4\0\45\2\1\375\6\2\47\0"+
    "\2\2\4\0\25\2\1\376\26\2\47\0\2\2\4\0"+
    "\4\2\1\377\47\2\47\0\2\2\4\0\2\2\1\u0100"+
    "\51\2\47\0\2\2\4\0\17\2\1\u0101\34\2\47\0"+
    "\2\2\4\0\1\2\1\u0102\52\2\47\0\2\2\4\0"+
    "\2\2\1\u0103\51\2\47\0\2\2\4\0\16\2\1\u0104"+
    "\35\2\47\0\2\2\4\0\2\2\1\u0105\51\2\47\0"+
    "\2\2\4\0\15\2\1\u0106\36\2\47\0\2\2\4\0"+
    "\11\2\1\u0107\42\2\47\0\2\2\4\0\7\2\1\u0100"+
    "\44\2\47\0\2\2\4\0\25\2\1\u0108\26\2\47\0"+
    "\2\2\4\0\6\2\1\u0109\45\2\47\0\2\2\4\0"+
    "\7\2\1\u0103\44\2\47\0\2\2\4\0\24\2\1\u010a"+
    "\27\2\47\0\2\2\4\0\7\2\1\u0105\44\2\47\0"+
    "\2\2\4\0\23\2\1\u010b\30\2\47\0\2\2\4\0"+
    "\14\2\1\u010c\37\2\47\0\2\2\4\0\42\2\1\u010d"+
    "\11\2\47\0\2\2\4\0\26\2\1\u010e\25\2\47\0"+
    "\2\2\4\0\27\2\1\u010f\24\2\47\0\2\2\4\0"+
    "\22\2\1\u0110\31\2\47\0\2\2\4\0\44\2\1\u0111"+
    "\7\2\47\0\2\2\4\0\31\2\1\u0112\22\2\47\0"+
    "\2\2\4\0\32\2\1\u010f\21\2\47\0\2\2\4\0"+
    "\34\2\1\u0113\17\2\47\0\2\2\4\0\1\2\1\u0114"+
    "\52\2\47\0\2\2\4\0\42\2\1\u0115\11\2\47\0"+
    "\2\2\4\0\2\2\1\u0116\51\2\47\0\2\2\4\0"+
    "\4\2\1\u0117\47\2\47\0\2\2\4\0\35\2\1\u0118"+
    "\16\2\47\0\2\2\4\0\35\2\1\u0119\16\2\47\0"+
    "\2\2\4\0\52\2\1\u011a\1\2\47\0\2\2\4\0"+
    "\1\u011b\53\2\47\0\2\2\4\0\36\2\1\u011c\15\2"+
    "\47\0\2\2\4\0\6\2\1\u011d\45\2\47\0\2\2"+
    "\4\0\44\2\1\u011e\7\2\47\0\2\2\4\0\7\2"+
    "\1\u011f\44\2\47\0\2\2\4\0\11\2\1\u0117\42\2"+
    "\47\0\2\2\4\0\37\2\1\u0120\14\2\47\0\2\2"+
    "\4\0\37\2\1\u0121\14\2\47\0\2\2\4\0\53\2"+
    "\1\u011a\47\0\2\2\4\0\5\2\1\u0122\46\2\47\0"+
    "\2\2\4\0\4\2\1\u0123\47\2\47\0\2\2\4\0"+
    "\11\2\1\u0124\42\2\47\0\2\2\4\0\1\2\1\u0125"+
    "\52\2\47\0\2\2\4\0\35\2\1\u0126\16\2\47\0"+
    "\2\2\4\0\6\2\1\u0127\45\2\47\0\2\2\4\0"+
    "\37\2\1\u0128\14\2\47\0\2\2\4\0\2\2\1\u0129"+
    "\51\2\47\0\2\2\4\0\1\2\1\u012a\52\2\47\0"+
    "\2\2\4\0\2\2\1\u012b\51\2\47\0\2\2\4\0"+
    "\34\2\1\u012c\17\2\47\0\2\2\4\0\42\2\1\u012d"+
    "\11\2\47\0\2\2\4\0\7\2\1\u0129\44\2\47\0"+
    "\2\2\4\0\6\2\1\u012e\45\2\47\0\2\2\4\0"+
    "\7\2\1\u012f\44\2\47\0\2\2\4\0\36\2\1\u0130"+
    "\15\2\47\0\2\2\4\0\44\2\1\u0131\7\2\47\0"+
    "\2\2\4\0\15\2\1\u0132\36\2\47\0\2\2\4\0"+
    "\4\2\1\u0133\47\2\47\0\2\2\4\0\15\2\1\u0134"+
    "\36\2\47\0\2\2\4\0\23\2\1\u0135\30\2\47\0"+
    "\2\2\4\0\11\2\1\u0133\42\2\47\0\2\2\4\0"+
    "\23\2\1\u0136\30\2\47\0\2\2\4\0\3\2\1\u0137"+
    "\50\2\47\0\2\2\4\0\16\2\1\u0138\35\2\47\0"+
    "\2\2\4\0\2\2\1\u0139\51\2\47\0\2\2\4\0"+
    "\42\2\1\u013a\11\2\47\0\2\2\4\0\3\2\1\u013b"+
    "\50\2\47\0\2\2\4\0\15\2\1\u013c\36\2\47\0"+
    "\2\2\4\0\13\2\1\u013d\40\2\47\0\2\2\4\0"+
    "\10\2\1\u013e\43\2\47\0\2\2\4\0\24\2\1\u013f"+
    "\27\2\47\0\2\2\4\0\7\2\1\u0139\44\2\47\0"+
    "\2\2\4\0\44\2\1\u0140\7\2\47\0\2\2\4\0"+
    "\10\2\1\u0141\43\2\47\0\2\2\4\0\23\2\1\u0142"+
    "\30\2\47\0\2\2\4\0\21\2\1\u013d\32\2\47\0"+
    "\2\2\4\0\13\2\1\u0143\40\2\47\0\2\2\4\0"+
    "\21\2\1\u0143\32\2\47\0\2\2\4\0\3\2\1\u0144"+
    "\50\2\47\0\2\2\4\0\3\2\1\u0145\50\2\47\0"+
    "\2\2\4\0\10\2\1\u0146\43\2\47\0\2\2\4\0"+
    "\10\2\1\u0147\43\2\47\0\2\2\4\0\1\u0148\53\2"+
    "\47\0\2\2\4\0\42\2\1\u0149\11\2\47\0\2\2"+
    "\4\0\30\2\1\u014a\23\2\47\0\2\2\4\0\4\2"+
    "\1\u014b\47\2\47\0\2\2\4\0\5\2\1\u014c\46\2"+
    "\47\0\2\2\4\0\44\2\1\u014d\7\2\47\0\2\2"+
    "\4\0\33\2\1\u014a\20\2\47\0\2\2\4\0\11\2"+
    "\1\u014b\42\2\47\0\2\2\4\0\16\2\1\u014e\35\2"+
    "\47\0\2\2\4\0\42\2\1\u014f\11\2\47\0\2\2"+
    "\4\0\24\2\1\u0150\27\2\47\0\2\2\4\0\44\2"+
    "\1\u0151\7\2\47\0\2\2\4\0\35\2\1\u0152\16\2"+
    "\47\0\2\2\4\0\30\2\1\u0153\23\2\47\0\2\2"+
    "\4\0\4\2\1\u0154\47\2\47\0\2\2\4\0\4\2"+
    "\1\u0155\47\2\47\0\2\2\4\0\42\2\1\u0156\11\2"+
    "\47\0\2\2\4\0\37\2\1\u0152\14\2\47\0\2\2"+
    "\4\0\33\2\1\u0153\20\2\47\0\2\2\4\0\11\2"+
    "\1\u0154\42\2\47\0\2\2\4\0\11\2\1\u0157\42\2"+
    "\47\0\2\2\4\0\44\2\1\u0158\7\2\47\0\2\2"+
    "\4\0\34\2\1\u0159\17\2\47\0\2\2\4\0\4\2"+
    "\1\u015a\47\2\47\0\2\2\4\0\36\2\1\u0159\15\2"+
    "\47\0\2\2\4\0\11\2\1\u015b\42\2\47\0\2\2"+
    "\4\0\2\2\1\u015c\51\2\47\0\2\2\4\0\1\u015d"+
    "\53\2\47\0\2\2\4\0\7\2\1\u015c\44\2\47\0"+
    "\2\2\4\0\5\2\1\u015e\46\2\47\0\2\2\4\0"+
    "\17\2\1\u015f\34\2\47\0\2\2\4\0\43\2\1\u0160"+
    "\10\2\47\0\2\2\4\0\25\2\1\u0161\26\2\47\0"+
    "\2\2\4\0\45\2\1\u0160\6\2\47\0\2\2\4\0"+
    "\15\2\1\u0162\36\2\47\0\2\2\4\0\4\2\1\u0163"+
    "\47\2\47\0\2\2\4\0\23\2\1\u0164\30\2\47\0"+
    "\2\2\4\0\11\2\1\u0163\42\2\47\0\2\2\4\0"+
    "\15\2\1\u0165\36\2\47\0\2\2\4\0\23\2\1\u0166"+
    "\30\2\47\0\2\2\4\0\2\2\1\u0167\51\2\47\0"+
    "\2\2\4\0\7\2\1\u0167\44\2\47\0\2\2\4\0"+
    "\1\2\1\u0168\52\2\47\0\2\2\4\0\6\2\1\u0168"+
    "\45\2\47\0\2\2\4\0\16\2\1\u0169\35\2\47\0"+
    "\2\2\4\0\24\2\1\u016a\27\2\47\0\2\2\4\0"+
    "\16\2\1\u016b\35\2\47\0\2\2\4\0\24\2\1\u016c"+
    "\27\2\47\0\2\2\4\0\42\2\1\u016d\11\2\47\0"+
    "\2\2\4\0\44\2\1\u016d\7\2\47\0\2\2\4\0"+
    "\42\2\1\u016e\11\2\47\0\2\2\4\0\44\2\1\u016e"+
    "\7\2\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25810];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\1\11\34\1\2\11\2\1\1\11\2\1"+
    "\32\11\1\0\67\1\10\11\1\0\2\11\101\1\1\11"+
    "\247\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	
    private int contador;
    private ArrayList<Yytoken> tokens;
    private ArrayList<ErroresC> errores;

	private void writeOutputFile() throws IOException{
			String filename = "file.out";
			BufferedWriter out = new BufferedWriter(
				new FileWriter(filename));
            System.out.println("\n*** Tokens guardados en archivo ***\n");
			for(Yytoken t: this.tokens){
				System.out.println(t);
				out.write(t + "\n");
			}
			out.close();

        //-----------------------------------------------------------------------
            String filenameE = "errores.txt";
			BufferedWriter error = new BufferedWriter(
				new FileWriter(filenameE));
            System.out.println("\n*** Tokens guardados en archivo ***\n");
			for(ErroresC t: this.errores){
				System.out.println(t);
				error.write(t + "\n");
			}
			error.close();

	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
      contador = 0;
	tokens = new ArrayList<Yytoken>();
        errores = new ArrayList<ErroresC>();
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try{
		this.writeOutputFile();
        //System.exit(0);
	}catch(IOException ioe){
		ioe.printStackTrace();
	}

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"id",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 89: break;
        case 2: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"num",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 90: break;
        case 3: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"gato",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 91: break;
        case 4: 
          { //ignorar
          }
        case 92: break;
        case 5: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"asignacion",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 93: break;
        case 6: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"suma",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 94: break;
        case 7: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"resta",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 95: break;
        case 8: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"multiplicacion",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 96: break;
        case 9: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"division",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 97: break;
        case 10: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"and",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 98: break;
        case 11: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"or",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 99: break;
        case 12: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"not",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 100: break;
        case 13: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"parentesis_apertura",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 101: break;
        case 14: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"parentesis_cierre",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 102: break;
        case 15: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Mayor_que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 103: break;
        case 16: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Menor_que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 104: break;
        case 17: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"terminador_sentencia",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 105: break;
        case 18: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"separador",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 106: break;
        case 19: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"puntos_de_rutina",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 107: break;
        case 20: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"comillas",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 108: break;
        case 21: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"llave_apertura",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 109: break;
        case 22: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"llave_cierre",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 110: break;
        case 23: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"corchete_apertura",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 111: break;
        case 24: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"corchete_cierre",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 112: break;
        case 25: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"signo_pesos",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"signo_pesos",yyline);
    errores.add(e);
    return t;
          }
        case 113: break;
        case 26: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"punto",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"punto",yyline);
    errores.add(e);
    return t;
          }
        case 114: break;
        case 27: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"guion_bajo",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"guion_bajo",yyline);
    errores.add(e);
    return t;
          }
        case 115: break;
        case 28: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Porciento",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"Porciento",yyline);
    errores.add(e);
    return t;
          }
        case 116: break;
        case 29: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Apertura_interrogacion",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"Apertura_interrogacion",yyline);
    errores.add(e);
    return t;
          }
        case 117: break;
        case 30: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Cierre_interrogacion",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"Cierre_interrogacion",yyline);
    errores.add(e);
    return t;
          }
        case 118: break;
        case 31: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Apostrofe",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"Apostrofe",yyline);
    errores.add(e);
    return t;
          }
        case 119: break;
        case 32: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Acento circunflejo",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"Acento circunflejo",yyline);
    errores.add(e);
    return t;
          }
        case 120: break;
        case 33: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Arroba",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"Arroba",yyline);
    errores.add(e);
    return t;
          }
        case 121: break;
        case 34: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Acento grave",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"Acento grave",yyline);
    errores.add(e);
    return t;
          }
        case 122: break;
        case 35: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Virgulilla",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"Virgulilla",yyline);
    errores.add(e);
    return t;
          }
        case 123: break;
        case 36: 
          { contador++;
     Yytoken t = new Yytoken(contador,yytext(),"diagonal_inversa",yyline,yycolumn);
     tokens.add(t);
     ErroresC e = new ErroresC(yytext(),"diagonal_inversa",yyline);
     errores.add(e);
     return t;
          }
        case 124: break;
        case 37: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"apertura_exclamacion",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"apertura_exclamacion",yyline);
     errores.add(e);
    return t;
          }
        case 125: break;
        case 38: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"dieresis",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"dieresis",yyline);
    errores.add(e);
    return t;
          }
        case 126: break;
        case 39: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"signo_negacion",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"signo_negacion",yyline);
    errores.add(e);
    return t;
          }
        case 127: break;
        case 40: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"signo_grado",yyline,yycolumn);
    tokens.add(t);
    ErroresC e = new ErroresC(yytext(),"signo_grado",yyline);
    errores.add(e);
    return t;
          }
        case 128: break;
        case 41: 
          { contador++;
     Yytoken t = new Yytoken(contador,yytext(),"acento_agudo",yyline,yycolumn);
     tokens.add(t);
     ErroresC e = new ErroresC(yytext(),"acento_agudo",yyline);
     errores.add(e);
     return t;
          }
        case 129: break;
        case 42: 
          { contador++;
     Yytoken t = new Yytoken(contador,yytext(),"caracter_acento",yyline,yycolumn);
     tokens.add(t);
     ErroresC e = new ErroresC(yytext(),"caracter_acento",yyline);
     errores.add(e);
     return t;
          }
        case 130: break;
        case 43: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"IF",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 131: break;
        case 44: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"igual que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 132: break;
        case 45: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Suma_sobre_asignación_previa",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 133: break;
        case 46: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"incremento",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 134: break;
        case 47: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Resta_sobre_asignacion_previa",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 135: break;
        case 48: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"decremento",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 136: break;
        case 49: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Multiplicacion_sobre_asignacion_previa",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 137: break;
        case 50: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Division_sobre_asignacion_previa",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 138: break;
        case 51: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"distinto",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 139: break;
        case 52: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Mayor_igual_que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 140: break;
        case 53: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Menor_igual_que",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 141: break;
        case 54: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"RET",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 142: break;
        case 55: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"END",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 143: break;
        case 56: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SET",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 144: break;
        case 57: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"xor",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 145: break;
        case 58: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"CASE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 146: break;
        case 59: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"CALL",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 147: break;
        case 60: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ELSE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 148: break;
        case 61: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"EXIT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 149: break;
        case 62: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"TEXT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 150: break;
        case 63: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"TIME",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 151: break;
        case 64: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"INIT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 152: break;
        case 65: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"CICLE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 153: break;
        case 66: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ROUTE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 154: break;
        case 67: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"TABLE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 155: break;
        case 68: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"VIRUS",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 156: break;
        case 69: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"START",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 157: break;
        case 70: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SLEEP",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 158: break;
        case 71: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"CREATE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 159: break;
        case 72: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"BIGINT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 160: break;
        case 73: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"DEFINE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 161: break;
        case 74: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SWITCH",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 162: break;
        case 75: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"GROWTH",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 163: break;
        case 76: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ECONOMY",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 164: break;
        case 77: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"TINYINT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 165: break;
        case 78: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"DECIMAL",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 166: break;
        case 79: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"DESTROY",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 167: break;
        case 80: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SEGMENT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 168: break;
        case 81: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"PROGRAM",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 169: break;
        case 82: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"RESOURCE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 170: break;
        case 83: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"BUILDING",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 171: break;
        case 84: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SMALLINT",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 172: break;
        case 85: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"REFERENCE",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 173: break;
        case 86: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"BEHAVIOUR",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 174: break;
        case 87: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SIMULATION",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 175: break;
        case 88: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"POPULATION",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 176: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
